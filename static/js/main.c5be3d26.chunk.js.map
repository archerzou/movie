{"version":3,"sources":["MovieCard.js","SearchMovie.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovie","props","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","console","log","url","fetch","res","json","data","results","error","onSubmit","htmlFor","type","name","placeholder","onChange","event","target","value","filter","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8OAiBeA,EAfG,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACd,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cACXC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAO,YAEtB,yBAAKJ,UAAU,iBACX,wBAAIA,UAAU,eAAeD,EAAMK,OACnC,8DAAWL,EAAMM,cACjB,kDAASN,EAAMO,cACf,uBAAGN,UAAU,cAAcD,EAAMQ,aCyC9BC,EAlDK,SAACC,GAAW,IAAD,EAEDC,mBAAS,IAFR,mBAEpBC,EAFoB,KAEbC,EAFa,OAIAF,mBAAS,IAJT,mBAIpBG,EAJoB,KAIbC,EAJa,KAMrBC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACjBD,EAAEE,iBACFC,QAAQC,IAAI,WAENC,EAJW,+GAImGV,EAJnG,iDAMKW,MAAMD,GANX,cAMPE,EANO,gBAOOA,EAAIC,OAPX,OAOPC,EAPO,OAQbX,EAAUW,EAAKC,SARF,kDAUbP,QAAQQ,MAAR,MAVa,0DAAH,sDAkBlB,OACI,6BACI,0BAAM3B,UAAU,OAAO4B,SAAUb,GAC7B,2BAAOf,UAAU,QAAQ6B,QAAQ,SAAjC,4BACA,2BACI7B,UAAU,QACV8B,KAAK,OACLC,KAAK,QACLC,YAAY,iCACZC,SAbK,SAAAC,GACjBtB,EAASsB,EAAMC,OAAOC,QAaVA,MAAOzB,IAEX,4BAAQX,UAAU,SAAS8B,KAAK,UAAhC,6BAIJ,yBAAK9B,UAAU,aACVa,EAAOwB,QAAO,SAAAtC,GAAK,OAAIA,EAAMG,eAAaoC,KAAI,SAAAvC,GAAK,OAChD,kBAAC,EAAD,CAAWA,MAAOA,EAAOwC,IAAKxC,EAAMyC,WC/BzCC,G,MAVH,WACV,OACI,yBAAKzC,UAAU,aACX,wBAAIA,UAAU,SAAd,wCACA,kBAAC,EAAD,SCIU0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLR,QAAQQ,MAAMA,EAAMgC,a","file":"static/js/main.c5be3d26.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MovieCard = ({movie}) => (\r\n    <div className=\"card\">\r\n        <img className=\"card--image\"\r\n            src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n            alt={movie.title+ ' poster'}\r\n        />\r\n        <div className=\"card--content\">\r\n            <h1 className=\"card--title\">{movie.title}</h1>\r\n            <h2>上映日期： {movie.release_date}</h2>\r\n            <h2>评分： {movie.vote_average}</h2>\r\n            <p className=\"card--desc\">{movie.overview}</p>\r\n        </div>              \r\n    </div>\r\n);\r\n\r\nexport default MovieCard;","import React, { useState } from 'react';\r\nimport MovieCard from './MovieCard';\r\n\r\nconst SearchMovie = (props) => {\r\n\r\n    const [query, setQuery] = useState('');\r\n\r\n    const [movies,setMovies] = useState([]);\r\n\r\n    const searchMovies = async (e) => {\r\n        e.preventDefault();\r\n        console.log(\"Submit!\");\r\n\r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=ca3bdd598c7cb4a2ea5f8a11c09333d3&language=zh&query=${query}&page=1&include_adult=false`;\r\n        try {\r\n            const res = await fetch(url);\r\n            const data  = await res.json();\r\n            setMovies(data.results);\r\n        }catch(err){\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    const handleChange = event => {\r\n        setQuery(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"form\" onSubmit={searchMovies}>\r\n                <label className=\"label\" htmlFor=\"query\">电影名称</label>\r\n                <input \r\n                    className=\"input\" \r\n                    type=\"text\" \r\n                    name=\"query\"\r\n                    placeholder=\"侏罗纪公园\"\r\n                    onChange={handleChange}\r\n                    value={query}  \r\n                />\r\n                <button className=\"button\" type=\"submit\">\r\n                    搜！！！\r\n                </button>\r\n            </form>\r\n            <div className=\"card-list\">\r\n                {movies.filter(movie => movie.poster_path).map(movie=> (\r\n                    <MovieCard movie={movie} key={movie.id}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchMovie;\r\n","import React from 'react';\nimport SearchMovie from './SearchMovie';\nimport './App.css';\n\nconst App = () => {\n  return (\n      <div className=\"container\">\n          <h1 className=\"title\">我的电影搜索</h1>\n          <SearchMovie />\n      </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}